import { promises as fs } from "node:fs"
import path from "node:path"

import { rimraf } from "rimraf"

import { registry } from "~/registry/index"

async function buildRegistryIndex() {
  let index = `/** biome-ignore-all lint/suspicious/noExplicitAny: REASON */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import { lazy } from "solid-js"

export const Index: Record<string, any> = {
`

  for (const item of registry.items) {
    const componentPath = item.files?.[0]?.path ? `~/registry/${item.files[0].path}` : ""

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    component: lazy(() => import("${componentPath}")),
    files: [${item.files?.map((file) => {
      const filePath = `src/registry/${typeof file === "string" ? file : file.path}`
      const resolvedFilePath = path.resolve(filePath)
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "registry/${file.path}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`
    })}],
    categories: ${JSON.stringify(item.categories)},
    meta: ${JSON.stringify(item.meta)},
  },`
  }

  index += `
}
`

  console.log(`#Ô∏è‚É£  ${Object.keys(registry.items).length} items found`)

  rimraf.sync(path.join(process.cwd(), "src/registry/__index__.tsx"))
  await fs.writeFile(path.join(process.cwd(), "src/registry/__index__.tsx"), index)
}

try {
  console.log("üóÇÔ∏è Building registry/__index__.tsx...")
  await buildRegistryIndex()
} catch (error) {
  console.error(error)
  process.exit(1)
}
